buildscript {
  repositories {
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  configurations.maybeCreate("pitest")

  dependencies {
    classpath "com.netflix.nebula:nebula-kotlin-plugin:1.2.61"
    classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    classpath "org.jmailen.gradle:kotlinter-gradle:1.16.0"
    classpath "com.netflix.nebula:nebula-release-plugin:6.3.5"
    classpath "com.netflix.nebula:nebula-publishing-plugin:8.2.0"
    classpath "com.netflix.nebula:nebula-bintray-plugin:3.5.5"
    classpath "com.ferranpons:twitter-gradle-plugin:1.0.2"
    classpath "org.jbake:jbake-gradle-plugin:1.2.0"
    classpath "org.ajoberstar:gradle-git:1.7.2"
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.6"
    classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0'
    pitest 'org.pitest:pitest-junit5-plugin:0.7'
  }
}

apply from: "$rootDir/gradle/announce.gradle"

allprojects {
  apply plugin: "nebula.release"
  group = "io.strikt"
  configurations.all {
      resolutionStrategy {
        componentSelection {
          all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pr'].any { qualifier ->
              selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            println(selection.candidate.version + rejected)
            if (rejected) {
              selection.reject('Release candidate')
            }
          }
        }
      }
    }
}

subprojects {
  repositories {
    jcenter()
  }

  configurations {
    compileClasspath {
      resolutionStrategy.activateDependencyLocking()
    }
    runtimeClasspath {
      resolutionStrategy.activateDependencyLocking()
    }
    testCompileClasspath {
      resolutionStrategy.activateDependencyLocking()
    }
    testRuntimeClasspath {
      resolutionStrategy.activateDependencyLocking()
    }
  }
}

